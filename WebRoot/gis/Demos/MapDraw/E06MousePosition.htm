<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>获取图形几何信息</title>

    <!--导入外部样式表-->
    <link href="../../CSS/ZondyDemoStyle.css" rel="stylesheet" type="text/css" />

    <!--必要的脚本引用-->
    <script src="../../Libs/jquery-1.7.1.min.js" type="text/javascript"></script>
    <script src="../../Libs/OpenLayers.js" type="text/javascript"></script>
    <script src="../../Libs/zdclient.js" type="text/javascript"></script>
    <script type="text/javascript">
        var map;
        var vectLayer = null;      //矢量图形绘制图层
        var drawControls = null;  //矢量图形绘制控件数组
        
        //地图初始化函数
        $(function () {
            //初始化地图容器
            map = new OpenLayers.Map({
                div: "mapCon",
                numZoomLevels: 11,
                layers: [
                    new Zondy.Map.TianDiTuLayer("天地图矢量", {
                        layerType: "vector",   //设置天地图类型
                        isBaseLayer: true,
                        visibility: false
                    })
                ],
                controls: [
                    new OpenLayers.Control.PanZoomBar(),                    //缩放面板的工具控件
                    new OpenLayers.Control.LayerSwitcher(),                 //图层切换控件
                    new OpenLayers.Control.Navigation(),                    //此控件处理伴随鼠标事件的地图浏览
                    new OpenLayers.Control.MousePosition()                  //此控件显示鼠标移动时，所在点的地理坐标
                ]
            });
            //设置地图的初始化显示中心和级别
            map.setCenter(new OpenLayers.LonLat(0, 0), 2);
            initDrawLayer();//初始化绘制图层及控件
        });

        function  initDrawLayer() {
            //设置地图初始显示的中心坐标和级别
            vectLayer = new OpenLayers.Layer.Vector("VectLayer");
            map.addLayer(vectLayer);
            drawControls = {
                point: new OpenLayers.Control.DrawFeature(vectLayer,
                                OpenLayers.Handler.Point, { featureAdded: AppendFeature }),
                line: new OpenLayers.Control.DrawFeature(vectLayer,
                                OpenLayers.Handler.Path, { featureAdded: AppendFeature }),
                polygon: new OpenLayers.Control.DrawFeature(vectLayer,
                                OpenLayers.Handler.Polygon, { featureAdded: AppendFeature }),
                RegularPolygon: new OpenLayers.Control.DrawFeature(vectLayer, OpenLayers.Handler.RegularPolygon, { featureAdded: AppendFeature })
            };
            for (var key in drawControls) {
                map.addControl(drawControls[key]);
            }
        }

        function AppendFeature(element) {
            if (element != null) {
                var typeIndex = document.getElementById("VectorType").selectedIndex;
                switch (typeIndex) {
                    case 0: //点
                        var geomObj = new Zondy.Object.Point2D();
                        geomObj.setByOL(element.geometry);
                        $("#getposInfoText").text("坐标信息：" +"\n"+ "X:" + geomObj.x + " Y:" + geomObj.y);
                        break;
                    case 1: //线
                        var geomObj = new Zondy.Object.PolyLine();
                        geomObj.setByOL(element.geometry);
                        var s = "";
                        if (geomObj.pointArr != null && geomObj.pointArr.length > 0) {
                            var s = geomObj.pointArr.toString();
                            $("#getposInfoText").text("坐标信息：" + "\n" + s);
                        }
                        break;
                    case 2: //多边形       
                    case 3: //矩形 
                    case 4: //规则五边形
                        var geomObj = new Zondy.Object.Polygon();
                        geomObj.setByOL(element.geometry);
                        var s = "";
                        if (geomObj.pointArr != null && geomObj.pointArr.length > 0) {
                            var s = geomObj.pointArr.toString();
                            $("#getposInfoText").text("坐标信息：" + "\n" + s);
                        }
                        break;
                    case 5: //圆
                        var geomObj = new Zondy.Object.Circle();
                        geomObj.setByOL(element.geometry);
                        var s = "";
                        $("#getposInfoText").text("坐标信息：" + "\n" + "圆心：" + geomObj.point.toString() + '\n' + "半径：" + geomObj.radious);
                        break;
                    case 7: //多边形
                        var geomObj = new Zondy.Object.Polygon();
                        geomObj.setByOL(element.geometry);
                        var s = "";
                        if (geomObj.pointArr != null && geomObj.pointArr.length > 0) {
                            var s = geomObj.pointArr.toString();
                            $("#getposInfoText").text("坐标信息：" + "\n" + s);
                        }
                        break;
                }
            }
        }

        //根据当前选择的绘制选项，切换绘制矢量图形的控件
        function toggleControl(element) {
            if (vectLayer == null) {
                initDrawLayer();
            }
            DeactiveDraw();
            for (key in drawControls) {
                var control = drawControls[key];
                if (element.value == key) {
                    control.activate();
                    var typeIndex = document.getElementById("VectorType").selectedIndex;
                    switch (typeIndex) {
                        case 3:
                            control.handler.setOptions({ sides: 4 });
                            break;

                        case 4:
                            control.handler.setOptions({ sides: 5 });
                            break;

                        case 5:
                            control.handler.setOptions({ sides: 40 });
                            break;
                    }
                }
            }
        }

        //取消矢量图形绘制控件的激活状态
        function DeactiveDraw() {
            for (key in drawControls) {
                var control = drawControls[key];
                control.deactivate();
            }
        }

        //清除绘制的图形
        function clearGraphics() {
            if (vectLayer) {
                map.removeLayer(vectLayer);
            }
            vectLayer = null;
            DeactiveDraw();        //取消矢量图形绘制控件的激活状态
        } 

    </script>
</head>
<body>
    <div id="header">
        <span id="title">Get Shape Geometric Coordinates Example</span> 
        <span id="shortdesc">通过在客户端绘制图形返回其几何坐标</span>
    </div>
     <table id="contentTable">
        <tr id="contentTableRow">
            <td id="mapSpanelCon">
                <!--地图显示-->
                <div id="mapCon">
                </div>
            </td>
            <td id="toolSpanelCon">
                <div id="toolspanel">
                    <p>
                        返回客户端所绘制图形的几何坐标：</p>
                    <div  class="itembox">
                        <label for="VectorType">请选择图形：</label>
                        <select id="VectorType" name="vec"  onclick="toggleControl(this)">
                            <option value="point" label="点" selected="selected">点</option>
                            <option value="line" label="线">线</option>
                            <option value="polygon" label="多边形">多边形</option>
                            <option value="RegularPolygon" label="矩形">矩形</option>
                            <option value="RegularPolygon" label="规则多边形">规则多边形</option>
                            <option value="RegularPolygon" label="圆">圆</option>
                        </select>
                        </div><br/>
                    <!--清除所有图形-->
                    <input type="button" id="clearGraphic" class="functionButton" value="清除所有图形" onclick="clearGraphics()" />
                    <textarea id="getposInfoText" >坐标信息：</textarea>
                </div>
            </td>
        </tr>
    </table>
</body>
</html>
