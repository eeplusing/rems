<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>控制矢量要素显示样式</title>

    <!--导入外部样式表-->
    <link href="../../CSS/ZondyDemoStyle.css" rel="stylesheet" type="text/css" />

    <!--必要的脚本引用-->
    <script src="../../Libs/OpenLayers.js" type="text/javascript"></script>
    <script src="../../Libs/jquery-1.7.1.min.js" type="text/javascript"></script>
    <script src="../../Libs/zdclient.js" type="text/javascript"></script>

    <!--colorPicker相关引用-->
    <link href="../../Scripts/colorPicker/js_color_picker_v2.css" rel="stylesheet" type="text/css" />
        <script src="../../Scripts/colorPicker/color_functions.js" type="text/javascript"></script>
        <script src="../../Scripts/colorPicker/js_color_picker_v2.js" type="text/javascript"></script>


    <script type="text/javascript">
        var map, vectorMapdoc;
        var drawControls = null; //矢量图形绘制控件数组
        var pointLayer;          //矢量点图层
        var lineLayer;           //矢量线图层
        var polygonLayer;        //矢量多边形图层
        var sInitColor = null;
        var srcElement = null;

        //地图初始化函数
        function init() {
            //初始化地图容器
            map = new OpenLayers.Map('mapCon', {
                isAutoConfig: true,  //设置自动获取MapGIS IGServer发布的地图的信息
                controls: [
                    new OpenLayers.Control.PanZoomBar(),                    //缩放面板的工具控件
                    new OpenLayers.Control.LayerSwitcher(),                 //图层切换控件
                    new OpenLayers.Control.Navigation(),                    //此控件处理伴随鼠标事件的地图浏览
                    new OpenLayers.Control.MousePosition()                 //此控件显示鼠标移动时，所在点的地理坐标
                ]
            });
            //初始化地图文档图层对象
            vectorMapdoc = new Zondy.Map.Doc("MapGIS IGS VectorMapdocLayer", "WorldMKTVector", {
                //矢量地图文档地图服务器ip
                ip: "127.0.0.1",
                //矢量地图文档地图服务端口
                port: "6163",
                //是否作为基础显示图层，默认为true，表示最为基础显示图层
                isBaseLayer: true
            });

            //将地图文档图层加载到地图中
            map.addLayers([vectorMapdoc]);
            //设置地图的初始化显示中心和级别
            map.setCenter(new OpenLayers.LonLat(0, 0), 2);
            initDrawCtrl();
        }
        
        //初始化矢量图形绘制图层和控件
        function initDrawCtrl() {
            //添加绘制矢量点、线、多边形的矢量图层
            pointLayer = new OpenLayers.Layer.Vector("Point Layer");
            lineLayer = new OpenLayers.Layer.Vector("Line Layer");
            polygonLayer = new OpenLayers.Layer.Vector("Polygon Layer");

            map.addLayers([pointLayer, lineLayer, polygonLayer]);

            //添加图层切换以及显示鼠标位置控件
            map.addControl(new OpenLayers.Control.LayerSwitcher());
            map.addControl(new OpenLayers.Control.MousePosition());

            //添加交互绘制矢量图形的控件（点、线、多边形）
            drawControls = {
                point: new OpenLayers.Control.DrawFeature(pointLayer,
                                OpenLayers.Handler.Point),
                line: new OpenLayers.Control.DrawFeature(lineLayer,
                                OpenLayers.Handler.Path),
                polygon: new OpenLayers.Control.DrawFeature(polygonLayer,
                                OpenLayers.Handler.Polygon)
            };

            for (var key in drawControls) {
                map.addControl(drawControls[key]);
            }
        }

        //根据当前选择的绘制选项，切换绘制矢量图形的控件
        function toggleControl(element) {
            for (key in drawControls) {
                var control = drawControls[key];
                if (element.value == key) {
                    control.activate();
                } else {
                    control.deactivate();
                }
            }
        }

        var inputObjStyleEx = null;
        //*设置颜色选择器
        function showColors(type, ids) {
            var o = document.getElementById(ids);
            inputObjStyleEx = o;
            showColorPicker(o, o, colorchangStyleEx);
        }
        function colorchangStyleEx(e) {
            inputObjStyleEx.style.background = inputObjStyleEx.value;
        }

        //修改矢量图层的样式，实现绘制不同风格的矢量图形
        function Submit1_onclick() {
            var vecType = $("#VectorType")[0];
            var strokeCap = $("#capType")[0];
            var strokeDash = $("#LineType")[0];
            var linWidth = $("#linWid")[0];
            var linOpca = $("#linOpc")[0];
            var linColor = $("#linCol")[0];
            var linFillColor = $("#fillCol")[0];
            switch (vecType.value) {
                case "point":
                    if (pointLayer != null) {
                        if (strokeDash.value) {
                            pointLayer.styleMap.styles["default"].defaultStyle.strokeDashstyle = String(strokeDash.value);
                        }
                        if (linColor.value) {
                            pointLayer.styleMap.styles["default"].defaultStyle.strokeColor = String(linColor.value);
                        }
                        if (linWidth.value) {
                            pointLayer.styleMap.styles["default"].defaultStyle.strokeWidth = Number(linWidth.value);
                        }
                        if (linFillColor.value) {
                            pointLayer.styleMap.styles["default"].defaultStyle.fillColor = String(linFillColor.value);
                        }
                        if (linOpca.value) {
                            pointLayer.styleMap.styles["default"].defaultStyle.strokeOpacity = Number(linOpca.value);
                        }
                        if (strokeCap.value) {
                            pointLayer.styleMap.styles["default"].defaultStyle.strokeLinecap = String(strokeCap.value);
                        }
                        toggleControl(vecType);
                    }
                    break;
                case "line":
                    if (lineLayer != null) {
                        if (strokeDash.value) {
                            lineLayer.styleMap.styles["default"].defaultStyle.strokeDashstyle = String(strokeDash.value);
                        }
                        if (linColor.value) {
                            lineLayer.styleMap.styles["default"].defaultStyle.strokeColor = String(linColor.value);
                        }
                        if (linWidth.value) {
                            lineLayer.styleMap.styles["default"].defaultStyle.strokeWidth = Number(linWidth.value);
                        }
                        if (linFillColor.value) {
                            lineLayer.styleMap.styles["default"].defaultStyle.fillColor = String(linFillColor.value);
                        }
                        if (linOpca.value) {
                            lineLayer.styleMap.styles["default"].defaultStyle.strokeOpacity = Number(linOpca.value);
                        }
                        if (strokeCap.value) {
                            lineLayer.styleMap.styles["default"].defaultStyle.strokeLinecap = String(strokeCap.value);
                        }
                        toggleControl(vecType);
                    }
                    break;
                case "polygon":
                    if (polygonLayer != null) {
                        if (strokeDash.value) {
                            polygonLayer.styleMap.styles["default"].defaultStyle.strokeDashstyle = String(strokeDash.value);
                        }
                        if (linColor.value) {
                            polygonLayer.styleMap.styles["default"].defaultStyle.strokeColor = String(linColor.value);
                        }
                        if (linWidth.value) {
                            polygonLayer.styleMap.styles["default"].defaultStyle.strokeWidth = Number(linWidth.value);
                        }
                        if (linFillColor.value) {
                            polygonLayer.styleMap.styles["default"].defaultStyle.fillColor = String(linFillColor.value);
                        }
                        if (linOpca.value) {
                            polygonLayer.styleMap.styles["default"].defaultStyle.strokeOpacity = Number(linOpca.value);
                        }
                        if (strokeCap.value) {
                            polygonLayer.styleMap.styles["default"].defaultStyle.strokeLinecap = String(strokeCap.value);
                        }
                        toggleControl(vecType);
                    }
                    break;
                default:
                    break;
            }
        }
        //取消矢量图形绘制控件的激活状态
        function Reset1_onclick() {
            for (key in drawControls) {
                var control = drawControls[key];
                control.deactivate();
            }
        }
        
        //清除绘制的图形
        function StyleDraw_clearEx() {
            closebackStyleEx();
            initDrawCtrl();
        }

        function closebackStyleEx() {
            map.removeLayer(pointLayer);
            map.removeLayer(lineLayer);
            map.removeLayer(polygonLayer);

            for (var key in drawControls) {
                drawControls[key].deactivate();
                map.removeControl(drawControls[key]);
            }
            drawControls = null; //矢量图形绘制控件数组
            pointLayer = null;          //矢量点图层
            lineLayer = null;           //矢量线图层
            polygonLayer = null;        //矢量多边形图层
            sInitColor = null;
            srcElement = null;
        }

    </script>
</head>
<body onload="init()">
    <div id="header">
        <span id="title">OpenLayers Vector Feature Style Example</span> <span id="shortdesc">
            在地图上实现添加矢量要素并控制其显示的样式</span>
    </div>
    <table id="contentTable">
        <tr id="contentTableRow">
            <td id="mapSpanelCon">
                <!--地图显示-->
                <div id="mapCon">
                </div>
            </td>
            <td id="toolSpanelCon">
                <div id="toolspanel">
                    <p>
                        在地图上添加矢量要素并控制其显示的样式：</p>
                    <div id="itembox" class="itembox">
                        <label for="themeType">
                            选择要素类型：</label>
                        <select id="VectorType" name="vec" style="width: 80px;">
                            <option value="polygon">多边形</option>
                            <option value="line">线</option>
                            <option value="point">点</option>
                        </select>
                    </div><br/>
                    <div id="Div1" class="itembox">
                        转角类型：
                        <select id="capType" name="cap">
                            <option value="butt">butt</option>
                            <option value="round">round</option>
                            <option value="square">square</option>
                        </select>
                    </div><br/>
                    <div id="Div2" class="itembox">
                        线型：
                        <select id="LineType" name="dash">
                            <option value="dot">dot</option>
                            <option value="dash">dash</option>
                            <option value="dashdot">dashdot</option>
                            <option value="longdash">longdash</option>
                            <option value="longdashdot">longdashdot</option>
                            <option value="solid">solid</option>
                        </select>
                    </div><br/>
                    <div id="Div3" class="itembox">
                        选择线颜色:<input id="linCol" type="text" size="6" alt="clrDlgLin" onclick="showColors('stroke','linCol')" />
                    </div><br/>
                    <div id="Div4" class="itembox">
                        填充颜色:<input id="fillCol" type="text" size="6" alt="clrDlgFill"  onclick="showColors('fill','fillCol')"/>
                    </div><br/>
                    <div id="Div5" class="itembox">
                        线宽度(pix):<input id="linWid" type="text" size="6" />
                    </div><br/>
                    <div id="Div6" class="itembox">
                        线透明度(0-1):<input id="linOpc" type="text" size="4" />
                    </div><br/>
                    <input id="Submit2" class="functionButton" type="submit" value="提交" onclick="return Submit1_onclick()" />
                    <input id="Reset2" class="functionButton" type="reset" value="停止" onclick="return Reset1_onclick()" />
                    <input id="clear2" class="functionButton" type="reset" value="清除" onclick="return StyleDraw_clearEx()" />
                </div>
            </td>
        </tr>
    </table>
</body>
</html>
