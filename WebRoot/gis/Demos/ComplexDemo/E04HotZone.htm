<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>热区示例</title>
    <!--导入外部样式表-->
    <link href="../../CSS/ZondyDemoStyle.css" rel="stylesheet" type="text/css" />
    <!--必要的脚本引用-->
    <script src="../../Libs/jquery-1.7.1.min.js" type="text/javascript"></script>
    <script src="../../Libs/OpenLayers.js" type="text/javascript"></script>
    <script src="../../Libs/zdclient.js" type="text/javascript"></script>
    
     <!--Easyui-->
    <link href="../../CSS/import/orbit-1.2.3.css" rel="stylesheet" type="text/css" />
    <link href="../../CSS/import/themes/base/jquery-ui-1.8.17.custom.css" rel="stylesheet"
        type="text/css" />
    <script src="../../Scripts/Easyui/jquery.orbit-1.2.3.js" type="text/javascript"></script>
    <script src="../../Scripts/Easyui/jquery-ui-1.8.17.custom.min.js" type="text/javascript"></script>
    <script src="../../Scripts/Easyui/jquery.ui.datepicker-zh-CN.js" type="text/javascript"></script>
    <link href="../../Scripts/Easyui/jqueryEasyui/easyui.css" rel="stylesheet" type="text/css" />
    <link href="../../Scripts/Easyui/jqueryEasyui/icon.css" rel="stylesheet" type="text/css" />
    <script src="../../Scripts/Easyui/jqueryEasyui/jquery.easyui.min.js" type="text/javascript"></script>

    <!--颜色板相关引用-->
     <link href="../../Scripts/colorPicker/js_color_picker_v2.css" rel="stylesheet" type="text/css" />
     <script src="../../Scripts/colorPicker/color_functions.js" type="text/javascript"></script>
     <script src="../../Scripts/colorPicker/js_color_picker_v2.js" type="text/javascript"></script>

    <script type="text/javascript">
        /*==========================================底图显示===================================================*/
        var map, vectorMapdoc;
        var svrIP = "127.0.0.1";
        var svrPort = "6163";
        var mapName = "WorldMKTVector";

        //地图初始化函数
        function init() {
            //初始化地图容器
            map = new OpenLayers.Map('mapCon', {
                //地图的缩放级别
                numZoomLevels: 10,
                //地图的最大范围
                maxExtent: new OpenLayers.Bounds(-20037508.34, -20037508.34, 20037508.34, 20037508.34),
                controls: [
                    new OpenLayers.Control.PanZoomBar(),                    //缩放面板的工具控件
                    new OpenLayers.Control.LayerSwitcher(),                 //图层切换控件
                    new OpenLayers.Control.Navigation(),                    //此控件处理伴随鼠标事件的地图浏览
                    new OpenLayers.Control.MousePosition()                 //此控件显示鼠标移动时，所在点的地理坐标
                ]
            });
            //初始化地图文档图层对象
            vectorMapdoc = new Zondy.Map.Doc("MapGIS IGS VectorMapdocLayer", mapName, {
                //矢量地图文档地图服务器ip
                ip: svrIP,
                //矢量地图文档地图服务端口
                port: svrPort,
                //是否作为基础显示图层，默认为true，表示最为基础显示图层
                isBaseLayer: true
            });
            //将地图文档图层加载到地图中
            map.addLayers([vectorMapdoc]);
            //设置地图的初始化显示中心和级别
            map.setCenter(new OpenLayers.LonLat(0, 0), 2);
        }

        /*============================================热区功能实现方法===================================================*/
        var mapHZ = null;
        var tileLayerHZ = null;     //瓦片图层
        var vecLayerHZ = null;      //矢量要素图层

        var ModifyControlHZ = null;    //矢量图形编辑控件
        var drawControlHZ = null;      //矢量图形绘制控件
        var deleteControlHZ = null;    //删除要素控件
        var selectControlHZ = null;
        var modifyAttControlHZ = null; //修改属性控件
        var mousePosControlHZ = null;

        var selectTypeHZ = null;    //选择操作类型（delete/pop）
        var curZoomHZ = null;       //当前zoom等级
        var isDspHotHZ = false;     //是否显示热区
        var curPosHZ = null;        //鼠标的实时坐标（经纬度）
        var isOnlyDispHZ = false;    //控制查询标志

        var currentStateHZ = null;      //当前操作状态
        var m_mFeatureHZ = null;        // 当前正在修改的要素
        var inputObjStyleEx = null;     //设置颜色选择器。当前点击对象
        var pop = null;
        var isHZCheck = false;

        var polygonFeature = [];

        var HotSelectXmin = 4465191.8165;
        var HotSelectYmin = 2149847.2299;
        var HotSelectXmax = 8350150.5847;
        var HotSelectYmax = 4512515.9485;

        //地图初始化函数
        function initHZ() {
            //创建地图容器
            mapHZ = map;

            var centx = (HotSelectXmax + HotSelectXmin) / 2;
            var centy = (HotSelectYmax + HotSelectYmin) / 2;

            mapHZ.setCenter(new OpenLayers.LonLat(centx, centy), 2);
            curZoomHZ = mapHZ.zoom;
            selectDataHZ();
        }

        /**
        * Method: selectDataHZ
        * 获取当前热区数据（从矢量区图层中读取），并添加到当前矢量图层进行显示，
        * Parameters:
        * Returns:
        */
        function selectDataHZ() {
            isDspHotHZ = true;
            selectGeoHotZone();
        }
        //查询获取区要素
        function selectGeoHotZone() {
            var geomObj = new Zondy.Object.Rectangle();
            geomObj.xmin = HotSelectXmin;
            geomObj.ymin = HotSelectYmin;
            geomObj.xmax = HotSelectXmax;
            geomObj.ymax = HotSelectYmax;


            var queryStruct = new Zondy.Service.QueryFeatureStruct();
            queryStruct.IncludeGeometry = true;
            var queryParam = new Zondy.Service.QueryParameter({ geometry: geomObj, resultFormat: "json", struct: queryStruct, pageIndex: 0, recordNumber: 100 });
            var queryService = new Zondy.Service.QueryDocFeature(queryParam, mapName,0, 1, { ip: svrIP, port:svrPort });
            queryService.query(onSuccessVecHotZone); //查询成功后的回调函数
        }
        function onSuccessVecHotZone(data) {
            var a = data;
            if (a.SFEleArray != null) {
                if (a.SFEleArray.length == 0) {
                    alert("查询结果为空");
                }
                else {
                    if (vecLayerHZ) {
                        deleteHotZone();
                    }
                    if (vecLayerHZ == null) {
                        vecLayerHZ = new OpenLayers.Layer.Vector("hotzone");
                        mapHZ.addLayer(vecLayerHZ);
                    }
                    queryResult1VecHot(a);
                }
            }
            else {
                alert("未选到点要素");
            }

        }
        //将查询返回的json对象在表格中显示，
        function queryResult1VecHot(a) {
            if (a == null || a.SFEleArray == null || a.SFEleArray.length <= 0) {
                return;
            }
            var strjson = new Array(a.SFEleArray.length);
            for (i = 0; i < a.SFEleArray.length; i++) {
                //strjson[i] = {};
                var att = {};
                for (k = 0; k <= a.AttStruct.FldName.length; k++) {
                    if (k == 0) {
                        att["FID"] = a.SFEleArray[i].FID;
                    }
                    else {
                        att[a.AttStruct.FldName[k - 1]] = a.SFEleArray[i].AttValue[k - 1];
                    }
                }
                getRegGeo(a.SFEleArray[i], att);
            }
            //添加所有的区要素
            vecLayerHZ.addFeatures(polygonFeature);

            deleteControlsHZ();
            //关联选择控件与区要素的图层
            selectControlHZ = new OpenLayers.Control.SelectFeature(vecLayerHZ, { hover: true, geometryTypes: ["OpenLayers.Geometry.Polygon"] });
            selectControlHZ.onSelect = commSelectHZ;
            selectControlHZ.onUnselect = funUnSelectHZ;
            mapHZ.addControl(selectControlHZ);
            selectControlHZ.activate();
        }

        /**
        * Method: commSelectHZ
        * selectFeature的Select响应事件，添加pop，修改要素显示风格（修改为不可见）
        * Parameters:
        * feature-{OpenLayers.Feature.Vector}
        * 矢量要素
        * Returns:
        */
        function commSelectHZ(feature) {
            setEmptyHZ();
            if (feature != null) {
                //重新设置当前热区颜色
                eqPolygonHover(feature);
                var att = feature.attributes;
                document.getElementById("attName").value = att.name;
                document.getElementById("attNum").value = att["人口"];
                document.getElementById("attAdree").value = Math.abs(att["面积"]);
            }
            else {
                return;
            }
        }
        //设置鼠标移动到区要素上时改变当前区要素的颜色
        function eqPolygonHover(feature) {
            var layer = feature.layer;
            layer.drawFeature(feature, { fillColor: "#D70301",
                fillOpacity: 0.8,
                hoverFillOpacity: 0.8,
                strokeColor: "#941228",
                strokeOpacity: 0.4,
                strokeWidth: 2,
                strokeLinecap: "round",
                strokeDashstyle: "solid",
                hoverStrokeColor: "red",
                hoverStrokeOpacity: 0.4,
                hoverStrokeWidth: 0.2,
                pointRadius: 6,
                hoverPointRadius: 1,
                hoverPointUnit: "%",
                pointerEvents: "visiblePainted",
                cursor: "pointer"
            });
        }
        //根据要素的边界坐标形成区要素
        function getRegGeo(sfEleObj, att) {
            if (sfEleObj.fGeom.RegGeom[0].Rings != null) {
                var linPointArr = [];
                for (var j = 0; j < sfEleObj.fGeom.RegGeom[0].Rings.length; j++) {
                    var ring = sfEleObj.fGeom.RegGeom[0].Rings[j].Arcs[0].Dots;
                    var points = [];
                    for (var k = 0; k < ring.length; k++) {
                        var point = new OpenLayers.Geometry.Point(ring[k].x, ring[k].y);
                        points.push(point);
                    }
                    var results = new OpenLayers.Geometry.LinearRing(points);
                    linPointArr.push(results);
                }
                var styleObj = getColorByArea(att);
                var hotFea = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Polygon(linPointArr), att, styleObj);
                polygonFeature.push(hotFea);
            }

        }
        //判断面积设置区要素不同的颜色
        function getColorByArea(att) {
            var obj = { fillColor: "#F06F69",
                fillOpacity: 0.9,
                hoverFillColor: "white",
                hoverFillOpacity: 0.9,
                strokeColor: "#ee9900",
                strokeOpacity: 1,
                strokeWidth: 1,
                strokeLinecap: "round",
                strokeDashstyle: "solid",
                hoverStrokeColor: "red",
                hoverStrokeOpacity: 1,
                hoverStrokeWidth: 0.2,
                pointRadius: 6,
                hoverPointRadius: 1,
                hoverPointUnit: "%",
                pointerEvents: "visiblePainted",
                cursor: "inherit"
            };
            var arearNum = Math.abs(att["面积"]);
            var colorNum = getColorNumHZ(arearNum);
            obj.fillColor = colorNum;
            var style = OpenLayers.Util.extend({ fill: true, stroke: true }, obj);
            return style;
        }


        /**
        * Method: updateTextHZ
        * 根据要素属性信息，更改相关text显示信息
        * Parameters:
        * feature-{OpenLayers.Feature.Vector}
        * 矢量要素
        * Returns:
        */
        function updateTextHZ(feature) {
            if (feature != null) {
                document.getElementById("attName").value = feature.attributes.name;
                document.getElementById("attNum").value = feature.attributes.pnum;
                document.getElementById("attAdree").value = feature.attributes.paddress;
            }
        }

        /**
        * Method: setEmptyHZ
        * 更改相关text显示信息为空
        * Parameters:
        * Returns:
        */
        function setEmptyHZ() {
            document.getElementById("attName").value = "";
            document.getElementById("attNum").value = "";
            document.getElementById("attAdree").value = "";
        }


        /**
        * Method: funUnSelectHZ
        * selectFeature的UnSelect响应事件，移除pop，修改要素显示风格（修改为不可见）
        * Parameters:
        * feature-{OpenLayers.Feature.Vector}
        * Returns:
        */
        function funUnSelectHZ(feature) {
            setEmptyHZ();
            if (feature != null) {
                setFeatureStyleHZ(feature, false);

                var len = mapHZ.popups.length;
                for (var i = len - 1; i >= 0; i--) {
                    mapHZ.removePopup(mapHZ.popups[i]);
                }
            }
        }



        //删除热区
        function deleteHotZone() {
            deleteControlsHZ();
            if (vecLayerHZ) {
                vecLayerHZ.removeAllFeatures();
                map.removeLayer(vecLayerHZ);
                vecLayerHZ = null;
            }
            polygonFeature = [];
        }

        /**
        * Method: showColors
        * 浏览器事件响应，实现弹出颜色拾取对话框
        * Parameters:
        * Returns:
        */
        function showColors(type, ids) {
            var o = document.getElementById(ids);
            inputObjStyleEx = o;
            showColorPicker(o, o, colorchangStyleEx);
        }
        /**
        * Method: colorchangStyleEx
        * 颜色拾取对话框回调函数，实现text的背景色修改
        * Parameters:
        * Returns:
        */
        function colorchangStyleEx(e) {
            inputObjStyleEx.style.background = inputObjStyleEx.value;
        }
       

        /**
        * Method: deactiveControlsHZ
        * 
        * Parameters:
        * Returns:
        */
        function deactiveControlsHZ() {
            if (ModifyControlHZ != null && ModifyControlHZ.active) {
                ModifyControlHZ.deactivate();
            }
            if (drawControlHZ != null && drawControlHZ.active) {
                drawControlHZ.deactivate();
            }
            if (selectControlHZ != null && selectControlHZ.active) {
                selectControlHZ.deactivate();
            }

            if (deleteControlHZ != null && deleteControlHZ.active) {
                deleteControlHZ.deactivate();
            }
            if (modifyAttControlHZ != null && modifyAttControlHZ.active) {
                modifyAttControlHZ.deactivate();
            }
        }

        /**
        * Method: deleteControlsHZ
        * 删除所有控件
        * Parameters:
        * Returns:
        */
        function deleteControlsHZ() {
            deactiveControlsHZ();
            if (ModifyControlHZ != null) {
                mapHZ.removeControl(ModifyControlHZ);
                ModifyControlHZ = null;
            }

            if (drawControlHZ != null) {
                mapHZ.removeControl(drawControlHZ);
                drawControlHZ = null;
            }

            if (selectControlHZ != null) {
                mapHZ.removeControl(selectControlHZ);
                selectControlHZ = null;
            }

            if (deleteControlHZ != null) {
                mapHZ.removeControl(deleteControlHZ);
                deleteControlHZ = null;
            }

            if (modifyAttControlHZ != null) {
                mapHZ.removeControl(modifyAttControlHZ);
                modifyAttControlHZ = null;
            }
        }




        /**
        * Method: getColorNumHZ
        * 根据人口数量获取颜色值
        * Parameters:
        * num-{Number}
        * Returns:
        *{string：颜色值字符串，以"#"号开头}
        */
        function getColorNumHZ(num) {
            var colorStr = null;

            if (num >= 0 && num < 10) {
                colorStr = document.getElementById("color1").value;
            }
            else if (num >= 10 && num < 100) {
                colorStr = document.getElementById("color2").value;
            }
            else if (num >= 100 && num < 500) {
                colorStr = document.getElementById("color3").value;
            }
            else {
                colorStr = document.getElementById("color4").value;
            }

            return colorStr;
        }



        /**
        * Method: setFeatureStyleHZ
        * 根据要素显示与否，设置要素的显示风格(填充透明度和边线透明度)
        * Parameters:
        * fea-{OpenLayers.Feature.Vector}
        * isDisp-{Boolean，true/false}
        * Returns:
        */
        function setFeatureStyleHZ(fea, isDisp) {
            if (fea != null) {
                if (isDisp) {
                    fea.style.fillOpacity = 0;
                    fea.style.strokeOpacity = 0;
                }
                else {
                    fea.style.fillOpacity = 0.8;
                    fea.style.strokeOpacity = 1;
                }
            }
        }

        function closebackHZ() {
            deleteHotZone();
            this.isHZCheck = false;
        }


    </script>
</head>
<body onload="init();">
    <div id="header">
        <span id="title">MapGIS IGServer HotZone Example</span> <span id="shortdesc">热区示例</span>
    </div>
    <table id="contentTable">
        <tr id="contentTableRow">
            <td id="mapSpanelCon">
                <!--地图显示-->
                <div id="mapCon">
                </div>
            </td>
            <td id="toolSpanelCon">
            <div id="toolspanel">
                <p>
                    热区示例：</p>
                <hr />
                <table>
                <tr>
                    <td colspan="2">
                        <p class="blockName">
                            热区图例(面积/颜色):</p>
                    </td>
                </tr>
                <tr>
                    <td >
                        <label for="color1">
                            0-10:</label>
                    </td>
                    <td>
                        <input id="color1" type="text" size="6" value="#51327b" style="background: #51327b"
                            alt="popColorDlg" onclick="showColors('stroke','color1')" readonly />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="color2">
                            10-100:</label>
                    </td>
                    <td>
                        <input id="color2" type="text" size="6"  value="#197fc6"  style="background: #197fc6"
                            alt="popColorDlg" onclick="showColors('stroke','color2')" readonly />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="color3">
                            100-500:</label>
                    </td>
                    <td>
                        <input id="color3" type="text" size="6" value="#109c6c" style="background: #109c6c"
                            alt="popColorDlg" onclick="showColors('stroke','color3')" readonly />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="color4">
                            其他:</label>
                    </td>
                    <td>
                        <input id="color4" type="text" size="6"  value="#75b726" style="background: #75b726"
                            alt="popColorDlg" onclick="showColors('stroke','color4')" readonly />
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        <p class="blockName">
                            热区属性显示:</p>
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        <label>
                            名称：</label><input id="attName" type="text" value="" />
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        <label>
                            人数：</label><input id="attNum" type="text"  value="" />
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        <label>
                            面积：</label><input id="attAdree" type="text" size="13" value="" />
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        <button class="functionButton"  id="Button4" onclick=" initHZ();">
                            添加热区</button>
                        <button class="functionButton"  id="Button3" onclick="deleteHotZone()">
                            删除热区</button>
                            </td>
                        </tr></table>
            </div>
            </td>
        </tr>
    </table>
</body>
</html>
