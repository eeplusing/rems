<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>矢量地图文档查询服务</title>
    <!--导入外部样式表-->
    <link href="../../CSS/ZondyDemoStyle.css" rel="stylesheet" type="text/css" />
    <!--必要的脚本引用-->
    <script src="../../Libs/jquery-1.7.1.min.js" type="text/javascript"></script>
    <script src="../../Libs/OpenLayers.js" type="text/javascript"></script>
    <script src="../../Libs/zdclient.js" type="text/javascript"></script>
    <!--Easyui-->
    <link href="../../CSS/import/orbit-1.2.3.css" rel="stylesheet" type="text/css" />
    <link href="../../CSS/import/themes/base/jquery-ui-1.8.17.custom.css" rel="stylesheet"
        type="text/css" />
    <script src="../../Scripts/Easyui/jquery.orbit-1.2.3.js" type="text/javascript"></script>
    <script src="../../Scripts/Easyui/jquery-ui-1.8.17.custom.min.js" type="text/javascript"></script>
    <script src="../../Scripts/Easyui/jquery.ui.datepicker-zh-CN.js" type="text/javascript"></script>
    <link href="../../Scripts/Easyui/jqueryEasyui/easyui.css" rel="stylesheet" type="text/css" />
    <link href="../../Scripts/Easyui/jqueryEasyui/icon.css" rel="stylesheet" type="text/css" />
    <script src="../../Scripts/Easyui/jqueryEasyui/jquery.easyui.min.js" type="text/javascript"></script>

    <script type="text/javascript">
        var map, vectorMapdoc;

        //地图初始化函数
        function init() {
            //初始化地图容器
            map = new OpenLayers.Map('mapCon', {
                isAutoConfig: true,  //设置自动获取MapGIS IGServer发布的地图的信息                                         //地图最大分辨率，默认是360度/256像素，相当于缩放级别0
                controls: [
                    new OpenLayers.Control.PanZoomBar(),                    //缩放面板的工具控件
                    new OpenLayers.Control.LayerSwitcher(),                 //图层切换控件
                    new OpenLayers.Control.Navigation(),                    //此控件处理伴随鼠标事件的地图浏览
                    new OpenLayers.Control.MousePosition()                  //此控件显示鼠标移动时，所在点的地理坐标
                ]
            });
            //初始化地图文档图层对象C
            vectorMapdoc = new Zondy.Map.Doc("MapGIS IGS VectorMapdocLayer", "WorldJWD20140808", {
                ip: "192.168.22.57",
                port: "6163",
                isBaseLayer: true
            });
            //将地图文档图层加载到地图中
            map.addLayers([vectorMapdoc]);

            //设置地图的初始化显示中心和级别
            map.setCenter(new OpenLayers.LonLat(0, 0), 2);
        }

        function queryByPline() {
            //初始化查询结构对象，设置查询结构包含几何信息
            var queryStruct = new Zondy.Service.QueryFeatureStruct();
            queryStruct.IncludeGeometry = true;
            //创建两条用于查询的多线数组
            var pointObj = new Array();
            pointObj[0] = new Zondy.Object.Point2D(116.4375, 41.53125);
            pointObj[1] = new Zondy.Object.Point2D(114.6875, 39.08125);
            pointObj[2] = new Zondy.Object.Point2D(118.1875, 39.34375);
            var polyLine = new Zondy.Object.PolyLine(pointObj);
            var pointObj2 = new Array();
            pointObj2[0] = new Zondy.Object.Point2D(105.5875, 48.70625);
            pointObj2[1] = new Zondy.Object.Point2D(106.1125, 46.86875);
            pointObj2[2] = new Zondy.Object.Point2D(108.3875, 48.44375);
            var polyLine2 = new Zondy.Object.PolyLine(pointObj2);
            pointObj.nearDis = 0.0001;
            pointObj2.nearDis = 0.0001;
            //实例化查询参数对象	
            var queryParam = new Zondy.Service.MultiGeoQueryParameter({
                geometry: [polyLine, polyLine2],
                geometryType: "line",
                resultFormat: "json",
                struct: queryStruct
            });
            //设置查询要素数目
            queryParam.recordNumber = 1000;
            //实例化地图文档查询服务对象
            var queryService = new Zondy.Service.MultiGeoQuery(queryParam, "WorldJWD20140808", 0, 1, {
                ip: "192.168.22.57",
                port: "6163"
            });
            //执行查询操作，querySuccess为查询回调函数
            queryService.query(querySuccess);
        }

        function querySuccess(result) {
            if (result.length == 0) {
                alert("查询失败！");
                return;
            } //if (result.length == 0)
            else if (result.ItemArray[0].AttStruct.FldName.length == 0 || result.ItemArray[0].SFEleArray.length == 0) {
                alert("没有查询到要素信息！");
                return;
            } //else if
            else {
                //需要取出的信息项
                var strjson = new Array();
                for (var i = 0; i < result.ItemArray[0].SFEleArray.length; i++) {
                    strjson[i] = {};
                    for (var j = 0; j < result.ItemArray[0].AttStruct.FldName.length; j++) {
                        var attributeName = result.ItemArray[0].AttStruct.FldName[j];
                        strjson[i][attributeName] = result.ItemArray[0].SFEleArray[i].AttValue[j]; //属性值
                    } //for j
                } //for i

                //填充datagrid
                var data = {
                    total: strjson.length + 1,
                    rows: strjson
                };

                //结果显示字段
                var filedStr = new Array();
                for (var k = 0; k < result.ItemArray[0].AttStruct.FldName.length; k++) {
                    filedStr[k] = {};
                    filedStr[k]["field"] = result.ItemArray[0].AttStruct.FldName[k];
                    filedStr[k]["title"] = result.ItemArray[0].AttStruct.FldName[k];
                    filedStr[k]["width"] = "30";
                    filedStr[k]["align"] = "center";
                }

                //创建结果显示列表
                var dsDatagridRq = null;
                dsDatagridRq = $('#vectorMapdocInfoTable').datagrid({
                    title: '查询结果',
                    width: 212,
                    height: 150,
                    fitColumns: true,
                    rownumbers: true,
                    singleSelect: true,
                    pageNumber: 1,
                    pageSize: 5,
                    pageList: [5, 10, 15, 20],
                    nowrap: false,
                    collapsible: true,
                    columns: [filedStr]
                });
                $("#vectorMapdocInfoTable").datagrid("loadData", data);
            } //else
        } //function querySuccess(result) 
    </script>
</head>
<body onload="init();">
    <div id="header">
        <span id="title">MapGIS IGServer QueryVectorMapdocByMultiPline</span> <span id="shortdesc">
            矢量地图文档查询服务（多线查询）</span>
    </div>
    <table id="contentTable">
        <tr id="contentTableRow">
            <td id="mapSpanelCon">
                <!--地图显示-->
                <div id="mapCon">
                </div>
            </td>
            <td id="toolSpanelCon">
                <div id="toolspanel">
                    <p>
                        矢量地图文档信息查询（多线查询）</p>
                        <div><span>提示：多线查询的图层是“世界政区.WP”的图层。本示例通过代码创建多线对象，然后根据创建的多线对象对地图进行查询。单击“查询”按钮，即可显示查询结果，默认最多只显示前20条。</span></div>
                    <input type="button" id="queryByPntBtn" value="查询" onclick="queryByPline()" />
                    <table id="vectorMapdocInfoTable">
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </td>
        </tr>
    </table>
</body>
</html>
