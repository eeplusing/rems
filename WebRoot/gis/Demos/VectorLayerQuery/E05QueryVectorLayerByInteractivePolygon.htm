<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>多边形查询（矢量图层）</title>
    <!--导入外部样式表-->
    <link href="../../CSS/ZondyDemoStyle.css" rel="stylesheet" type="text/css" />
    <!--必要的脚本引用-->
    <script src="../../Libs/jquery-1.7.1.min.js" type="text/javascript"></script>
    <script src="../../Libs/OpenLayers.js" type="text/javascript"></script>
    <script src="../../Libs/zdclient.js" type="text/javascript"></script>
    
     <!--Easyui-->
    <link href="../../CSS/import/orbit-1.2.3.css" rel="stylesheet" type="text/css" />
    <link href="../../CSS/import/themes/base/jquery-ui-1.8.17.custom.css" rel="stylesheet"
        type="text/css" />
    <script src="../../Scripts/Easyui/jquery.orbit-1.2.3.js" type="text/javascript"></script>
    <script src="../../Scripts/Easyui/jquery-ui-1.8.17.custom.min.js" type="text/javascript"></script>
    <script src="../../Scripts/Easyui/jquery.ui.datepicker-zh-CN.js" type="text/javascript"></script>
    <link href="../../Scripts/Easyui/jqueryEasyui/easyui.css" rel="stylesheet" type="text/css" />
    <link href="../../Scripts/Easyui/jqueryEasyui/icon.css" rel="stylesheet" type="text/css" />
    <script src="../../Scripts/Easyui/jqueryEasyui/jquery.easyui.min.js" type="text/javascript"></script>

    <script type="text/javascript">
        /*==========================================底图显示===================================================*/
        //地图配置参数
        var SvrCfg = {
            ip: "127.0.0.1",
            port: "6163",
            vectorLayerGdbps: "gdbp://MapGisLocal/OpenLayerVecterMap/ds/世界地图经纬度/sfcls/世界政区"
        };
        var map, vectorLayer;
        //查询相关参数设置
        var geomLayerPGQ = null;
        var drawControlPGQ = null;
        var flashLayerPGQ = null;  //临时用于存放需闪烁的要素的图层
        var timerPGQ = null;
        var m_datagridPGQ = null;
        var CustomersDataPGQ = null;
        var temRecPGQ = null;

        //地图初始化函数
        function init() {
            //初始化地图容器
            map = new OpenLayers.Map('mapCon', {
                isAutoConfig: true,  //设置自动获取MapGIS IGServer发布的地图的信息
                //地图常用工具控件
                controls: [
                    new OpenLayers.Control.PanZoomBar(), //缩放面板的工具控件
                    new OpenLayers.Control.LayerSwitcher(), //图层切换控件
                    new OpenLayers.Control.Navigation(), //此控件处理伴随鼠标事件的地图浏览
                    new OpenLayers.Control.MousePosition(),  //此控件显示鼠标移动时，所在点的地理坐标
                    new OpenLayers.Control.OverviewMap()     //鹰眼
                ]
            });

            //初始化矢量图层对象
            vectorLayer = new Zondy.Map.Layer("MapGIS IGS VectorLayer", [SvrCfg.vectorLayerGdbps], {
                //矢量图层地图服务器ip
                ip: SvrCfg.ip,
                //矢量图层地图服务端口
                port: SvrCfg.port,
                //是否作为基础显示图层，默认为true
                isBaseLayer: true
            });

            //将矢量图层加载到地图中
            map.addLayers([vectorLayer]);

            //设置地图的初始化显示中心和级别
            map.setCenter(new OpenLayers.LonLat(0, 0), 2);
            initPGQCtrl(); //初始化查询环境
        }

        /*==========================================交互式画多边形查询===================================================*/
        function initPGQCtrl() {
            //创建画多边形层并添加到地图容器中
            geomLayerPGQ = new OpenLayers.Layer.Vector("geomLayerPGQ");
            map.addLayer(geomLayerPGQ);
            flashLayerPGQ = new OpenLayers.Layer.Vector("flashLayerPGQ ");
            map.addLayer(flashLayerPGQ);

            //创建画多边形控件并添加在地图容器中，指定控件的回调函数featureAdded
            drawControlPGQ = new OpenLayers.Control.DrawFeature(geomLayerPGQ, OpenLayers.Handler.Polygon);

            drawControlPGQ.featureAdded = callbackPGQ; //画多边形查询的回调函数
            map.addControl(drawControlPGQ);
        }

        //激活查询控件，可实施画多边形查询
        function queryPGQ() {
            stopFlashPGQ();
            if (drawControlPGQ) {
                drawControlPGQ.activate();
            }
        }

        //接收多边形对象，读取对象几何信息和调用Zondy的查询服务
        function callbackPGQ(feature) {
            stopFlashPGQ();
            var geomObj = new Zondy.Object.Polygon();
            geomObj.setByOL(feature.geometry);
            feature.destroy();
            var queryStruct = new Zondy.Service.QueryFeatureStruct();
            queryStruct.IncludeGeometry = true;
            var queryParam = new Zondy.Service.QueryByLayerParameter(SvrCfg.vectorLayerGdbps,{ geometry: geomObj, resultFormat: "json", struct: queryStruct, pageIndex: 0, recordNumber: 20 });
            var queryService = new Zondy.Service.QueryLayerFeature(queryParam,  { ip: SvrCfg.ip, port: SvrCfg.port,requestType:"GET" });

            queryService.query(onSuccessPGQ); //查询成功后的回调函数
        }

        //获取查询结果（要素数组），并以动态表格形式展示每个要素信息
        function onSuccessPGQ(data) {
            var a = data;
            if (a.SFEleArray != null) {
                if (a.SFEleArray.length == 0) {
                    alert("查询结果为空");
                }
                else queryResult1PGQ(a, flashLayerPGQ);
            }
            else {
                alert("未选到要素");
            }
        }
        //注销查询控件
        function clearqueryPGQ() {
            if (drawControlPGQ)
                drawControlPGQ.deactivate();
        }

        //切换图层的可见属性，实现闪烁效果
        function toggleLayerPGQ() {
            if (flashLayerPGQ != null) {
                if (flashLayerPGQ.visibility) {
                    flashLayerPGQ.setVisibility(false);
                }
                else {
                    flashLayerPGQ.setVisibility(true);
                }
            }
        }
        function startFlashPGQ() {
            if (timerPGQ != null) {
                clearInterval(timerPGQ);
            }
            timerPGQ = setInterval(toggleLayerPGQ, 500);
        }
        function stopFlashPGQ() {
            clearInterval(timerPGQ);
            flashLayerPGQ.setVisibility(false);
        }

        //将查询返回的json对象在表格中显示，
        function queryResult1PGQ(a, mLayer) {

            if (a == null || a.SFEleArray == null || a.SFEleArray.length <= 0) {
                return;
            }
            if (mLayer == null) {
                return;
            }

            var strjson = new Array(a.SFEleArray.length);
            for (i = 0; i < a.SFEleArray.length; i++) {
                strjson[i] = {};
                for (k = 0; k <= a.AttStruct.FldName.length; k++) {
                    if (k == 0) {
                        strjson[i]["FID"] = a.SFEleArray[i].FID;
                    }
                    else {
                        strjson[i][a.AttStruct.FldName[k - 1]] = a.SFEleArray[i].AttValue[k - 1];
                    }
                }
            }


            mLayer.setVisibility(false);
            //    createFlashPntPGQ(a, mLayer);
            //格式化后的JSON数据
            CustomersDataPGQ = {
                total: a.SFEleArray.length,
                rows: strjson

            };
            //    var row = null;
            var filedStr = new Array(a.AttStruct.FldName.length + 2);
            for (var k = 0; k <= a.AttStruct.FldName.length + 1; k++) {
                filedStr[k] = {};
            }
            for (var m = 0; m <= a.AttStruct.FldName.length; m++) {
                if (m == 0) {
                    filedStr[m]["field"] = "FID";
                    filedStr[m]["title"] = "FID";

                }
                else {
                    filedStr[m]["field"] = a.AttStruct.FldName[m - 1];
                    filedStr[m]["title"] = a.AttStruct.FldName[m - 1];
                    filedStr[m]["editor"] = "text";
                }

                filedStr[m]["align"] = "center";
                filedStr[m]["width"] = 80;
            }
            filedStr[a.AttStruct.FldName.length + 1]["field"] = 'action';
            filedStr[a.AttStruct.FldName.length + 1]["title"] = '操作';
            filedStr[a.AttStruct.FldName.length + 1]["align"] = 'center';
            filedStr[a.AttStruct.FldName.length + 1]["width"] = 80;
            filedStr[a.AttStruct.FldName.length + 1]["formatter"] = dealActionPQ;
            function dealActionPQ(value, row, index) {
                if (row.editing) {
                    var s = '<a href="#" onclick="saverowPGQ(' + index + ')">保存</a> ';
                    var c = '<a href="#" onclick="cancelrowPGQ(' + index + ')">取消</a>';
                    return s + c;
                } else {
                    var e = '<a href="#" onclick="editrowPGQ(' + index + ')">编辑</a> ';
                    return e;
                }
            }
            m_datagridPGQ = $('#PQTable').datagrid({
                title: '查询结果',
                width: 420,
                height: 250,
                fitColumns: true,
                rownumbers: true,
                singleSelect: true,
                pageNumber: 1,
                pageSize: 5,
                pageList: [5, 10, 15, 20],
                nowrap: false,
                collapsible: true,
                columns: [filedStr],
                toolbar: [{
                    text: '取消',
                    iconCls: 'icon-cancel',
                    handler: cancelallPGQ
                }],
                onSelect: function (rowIndex, rowData) {
                    queryByIDPGQ(rowData.FID);
                },
                onAfterEdit: function (index, row) {
                    row.editing = false;
                    var fid = row.FID;
                    $('#PQTable').datagrid('refreshRow', index);
                    temRecPGQ = row;
                    if (temRecPGQ) {
                        updateFeatureByIDPGQ(fid, temRecPGQ);
                    }
                },
                onBeforeEdit: function (index, row) {
                    row.editing = true;
                    $('#PQTable').datagrid('refreshRow', index);
                },
                onCancelEdit: function (index, row) {
                    row.editing = false;
                    $('#PQTable').datagrid('refreshRow', index);
                }
            });
            $("#PQTable").datagrid("loadData", CustomersDataPGQ);
            $('#PQTable').datagrid('getPager').pagination(
            {

                beforePageText: '第', //页数文本框前显示的汉字  
                afterPageText: '页    共 {pages} 页',
                displayMsg: '当前显示 {from} - {to} 条记录   共 {total} 条记录',
                // displayMsg:'当前显示从{from}到{to}共{total}记录',
                onBeforeRefresh: function (pageNumber, pageSize) {
                    $(this).pagination('loading');
                    alert('pageNumber:' + pageNumber + ',pageSize:' + pageSize);
                    $(this).pagination('loaded');
                }
            });
            $("#switchBnt").css("display", "block");

        }

        function editrowPGQ(index) {
            $('#PQTable').datagrid('beginEdit', index);
        }
        function saverowPGQ(index) {
            $('#PQTable').datagrid('endEdit', index);
        }
        function cancelrowPGQ(index) {
            $('#PQTable').datagrid('cancelEdit', index);
        }
        function saveallPGQ() {
            $('#PQTable').datagrid('acceptChanges');
        }
        function cancelallPGQ() {
            $('#PQTable').datagrid('rejectChanges');
            if (flashLayerPGQ != null) {
                flashLayerPGQ.removeAllFeatures();
                flashLayerPGQ.setVisibility(false);
            }
        }
        function queryByIDPGQ(id) {
            var queryStruct = new Zondy.Service.QueryFeatureStruct();
            queryStruct.IncludeGeometry = true;
            var queryParam = new Zondy.Service.QueryByLayerParameter(SvrCfg.vectorLayerGdbps,{ objectIds: id, struct: queryStruct });
            var queryService = new Zondy.Service.QueryLayerFeature(queryParam,{ ip: SvrCfg.ip, port: SvrCfg.port });
            queryService.query(flashOnePntPGQ); //查询成功后的回调函数
        }

        function updateFeatureByIDPGQ(id, rcd) {
            var queryStruct = new Zondy.Service.QueryFeatureStruct();
            queryStruct.IncludeGeometry = true;
            var queryParam = new Zondy.Service.QueryByLayerParameter(SvrCfg.vectorLayerGdbps,{ objectIds: id, struct: queryStruct });
            var queryService = new Zondy.Service.QueryLayerFeature(queryParam, { ip: SvrCfg.ip, port: SvrCfg.port });
            queryService.query(updateFeaturePGQ); //查询成功后的回调函数
        }
        function updateFeaturePGQ(jsonObj) {
            var feature = jsonObj.SFEleArray[0];
            if (feature != null) {
                for (var i = 0; i < jsonObj.AttStruct.FldNumber; i++) {
                    feature.AttValue[i] = temRecPGQ[jsonObj.AttStruct.FldName[i]];
                }
                var newFeature = new Zondy.Object.Feature(feature);
                var newFeatureSet = new Zondy.Object.FeatureSet();
                //属性结构
                newFeatureSet.AttStruct = jsonObj.AttStruct;
                //要素
                newFeatureSet.addFeature(newFeature);
                var editService = new Zondy.Service.EditLayerFeature(SvrCfg.vectorLayerGdbps, { ip: SvrCfg.ip, port: SvrCfg.port });
                editService.update(newFeatureSet, successPGQ);
            }
        }
        function successPGQ(rlt) {
            if (rlt == true)
                alert("要素编辑成功");
            else
                alert("要素编辑失败");
        }
        function flashOnePntPGQ(jsonObj) {
            createFlashPntPGQ(jsonObj, flashLayerPGQ);
            startFlashPGQ();
        }

        //功能：根据查询得到的json对象，在临时闪烁图层中添加点要素
        function createFlashPntPGQ(jsonObj, mLayer) {
            var style = {
                strokeColor: "black", //"red", //"",
                strokeWidth: 0,
                strokeOpacity: 1,
                fillOpacity: 1,
                fillColor: "red"

            };
            if (mLayer == null || jsonObj == null) {
                return;
            }
            else {
                mLayer.removeAllFeatures();
            }

            if (jsonObj.SFEleArray == null || jsonObj.SFEleArray.length <= 0) {
                return;
            }

            for (i = 0; i < jsonObj.SFEleArray.length; i++) {
                if (jsonObj.SFEleArray[i].fGeom.RegGeom[0].Rings != null) {
                    var linPointArr = [];
                    for (var j = 0; j < jsonObj.SFEleArray[i].fGeom.RegGeom[0].Rings.length; j++) {
                        var ring = jsonObj.SFEleArray[i].fGeom.RegGeom[0].Rings[j].Arcs[0].Dots;
                        var points = [];
                        for (var k = 0; k < ring.length; k++) {
                            var point = new OpenLayers.Geometry.Point(ring[k].x, ring[k].y);
                            points.push(point);
                        }
                        var results = new OpenLayers.Geometry.LinearRing(points);
                        linPointArr.push(results);
                    }
                    var p = new OpenLayers.Geometry.Polygon(linPointArr);
                    var regFeature = new OpenLayers.Feature.Vector(p, null, style);
                    mLayer.addFeatures([regFeature]);
                }
                if (i == 0) {
                    if (jsonObj.SFEleArray[0].bound) {
                        var pantoX = (jsonObj.SFEleArray[0].bound.xmin + jsonObj.SFEleArray[0].bound.xmax) / 2;
                        var pantoY = (jsonObj.SFEleArray[0].bound.ymin + jsonObj.SFEleArray[0].bound.ymax) / 2;
                    }
                    map.setCenter(new OpenLayers.LonLat(pantoX, pantoY));
                }
            }
        }
    </script>
</head>
<body onload="init()">
  <div id="header">
        <span id="title">MapGIS IGServer QueryVectorLayerByInteractivePolygon Example</span> <span id="shortdesc">多边形查询（矢量图层）：</span>
    </div>
    <table id="contentTable">
        <tr id="contentTableRow">
            <td id="mapSpanelCon">
                <!--地图显示-->
                <div id="mapCon">
                </div>
            </td>
            <td id="toolSpanelCon">
                <div id="toolspanel">
                    <p>
                        多边形查询（矢量图层）：</p>
                    <button class="functionButtonForQuery" onclick="queryPGQ()">多边形查询区图层</button>
                    <button class="functionButton" onclick="clearqueryPGQ()">停止查询</button>
                    <button class="functionButton" onclick="stopFlashPGQ()">停止闪烁</button><br />
                    <div><span>提示：多边形查询的图层是“世界政区.WP”的图层。先单击“多边形查询区图层”的按钮，然后在地图上绘制多边形选择要素即可得到结果,默认最多只显示前20条,单击结果框里的查询结果可使要素闪烁显示。</span></div>
                <table id="PQTable"></table>
                </div>
            </td>
        </tr>
    </table>
</body>
</html>
